---
title: "analysis"
format: 
  html:
    embed-resources: true
    theme: flatly
    toc: true
    toc-depth: 3
    toc-expand: 3
    toc-title: Contents
    smooth-scroll: true
editor: visual
params:
  organism: human
---

```{r}
library(dplyr)
library(ggplot2)
library(tidyr)
```

# Loading the data

```{r}
human_df <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/Human-separateProjects.csv", header = T)
human_ptms_expanded_hl <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_ptms_expanded_hl.tsv", header = T, sep = '\t')
human_ptms_expanded_length <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_ptms_expanded_length.tsv", header = T, sep = '\t')
human_ptms_expanded_hl_lengths <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_ptms_expanded_hl_lengths.tsv", header = T, sep = '\t')

```

::: callout-important
-   I think I am doing something wrong here because the p values are not really showing what I am expecting to see based on the graphs.

-   I am also not sure whether I should be working with subsets of data at this point because the dataframe with only the top 5 modifications has 1.5 million entries.
:::

## Testing the difference between the mean number of PTMs of each type

-   We want to investigate the effect of the type of PTM on the half-life of the proteins.

#### Assumptions

```{r}
library(ggpubr)
library(rstatix)
human_ptms_expanded_hl_top5 <- human_ptms_expanded_hl %>% filter(ptm_name %in% c('[35]Oxidation', '[34]Methyl', '[40]Sulfo', '[21]Phospho', '[7]Deamidated'))

# normality assumption

# Build the linear model
model  <- lm(mean_hl_hours ~ ptm_name, data = human_ptms_expanded_hl_top5)
# Create a QQ plot of residuals
#ggqqplot(residuals(model))
ggqqplot(human_ptms_expanded_hl_top5, "mean_hl_hours", facet.by = "ptm_name")
```

```{r}
# homogeneity of variances 
human_ptms_expanded_hl_top5 %>% levene_test(mean_hl_hours ~ ptm_name)
plot(model, 1)
```

#### Test

Parametric test, assume that the assumptions are met.

```{r}
table_aov <- aov(human_ptms_expanded_hl_top5$mean_hl_hours ~ human_ptms_expanded_hl_top5$ptm_name, data = human_ptms_expanded_hl_top5)
summary(table_aov)

values <- TukeyHSD(table_aov)
```

### Krustal test

Non-parametric. (Normality assumption is not met)

::: callout-important
It appears that the normality assumption is not met, so I shouldn't use the parametric test, however, there is definitely something wrong here because I am expecting a high p value, not a low one. Also a p value of 0 seems strange?
:::

```{r}
library(rstatix)
res.kruskal <- human_ptms_expanded_hl_top5 %>% kruskal_test(mean_hl_hours ~ ptm_name)
res.kruskal

pwc2 <- human_ptms_expanded_hl_top5 %>% 
  wilcox_test(mean_hl_hours ~ ptm_name, p.adjust.method = "bonferroni")
pwc2
```

## Protein lengths

### Testing statistical significance

Larger proteins should be modified more than shorter proteins.

::: callout-important
How do I know at what point a protein is 'long' or 'short', if I want to check the differences in the number of PTMs between the two. It seems to be a very arbitrary threshold?
:::

```{r}
library(stats)

human_ptms_expanded_length %>% 
  group_by(LeadProt) %>% 
  mutate(counts = n()) %>%
  select(LeadProt, counts, Length) %>% distinct()

human_ptms_expanded_length_aov <- human_ptms_expanded_length %>% mutate(length_group = ifelse(Length < 2500, 'short', 'long'))

table_aov <- aov(human_ptms_expanded_length_aov$Length ~ human_ptms_expanded_length_aov$length_group, data = human_ptms_expanded_length_aov)
summary(table_aov)
```

```{r}
# Load required libraries
library(ggplot2)
library(dplyr)

# Suppose df_parkinsons contains the list of people with Parkinson's
# and df_age contains their ages
data
# Example data
df_parkinsons <- data.frame(
  patient_id = 1:100
)

# Example ages
df_age <- data.frame(
  patient_id = sample(1:100, 100, replace = TRUE),  # Random assignment of ages to patients
  age = sample(40:90, 100, replace = TRUE)  # Random ages for demonstration
)

# Join the two dataframes
df_combined <- inner_join(df_parkinsons, df_age, by = "patient_id")

# Create histogram of age distribution for people with Parkinson's
parkinsons_hist <- ggplot(df_combined, aes(x = age)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Age Distribution of People with Parkinson's",
       x = "Age",
       y = "Frequency") +
  theme_minimal()
parkinsons_hist


```

```{r}
# Create histogram of age distribution for a reference population
# For demonstration purpose, let's create a random distribution
reference_age <- sample(40:90, 1000, replace = TRUE)
reference_hist <- ggplot(data.frame(age = reference_age), aes(x = age)) +
  geom_histogram(binwidth = 5, fill = "lightgreen", color = "black", alpha = 0.7) +
  labs(title = "Reference Age Distribution",
       x = "Age",
       y = "Frequency") +
  theme_minimal()
reference_hist


```

```{r}
# Extract data from histograms
parkinsons_data <- ggplot_build(parkinsons_hist)$data[[1]]
reference_data <- ggplot_build(reference_hist)$data[[1]]
parkinsons_data
# Normalize Parkinson's histogram by reference histogram
normalized_freq <- parkinsons_data$count / reference_data$count

# Plot normalized histogram
normalized_hist <- ggplot() +
  geom_bar(stat = "identity", aes(x = parkinsons_data$x, y = normalized_freq),
           fill = "skyblue", color = "black", alpha = 0.7) +
  labs(title = "Normalized Age Distribution of People with Parkinson's",
       x = "Age",
       y = "Normalized Frequency") +
  theme_minimal()

# Display the normalized histogram
print(normalized_hist)

```

```{r}
# Generate example population ages (1000 individuals)
set.seed(123)  # for reproducibility
population_ages <- c(rnorm(700, mean = 40, sd = 15), rnorm(200, mean = 60, sd = 10), rnorm(100, mean = 20, sd = 5))

hist(population_ages)

```

```{r}
# Generate example ages for a small group (100 individuals)
group_ages <- c(rnorm(60, mean = 35, sd = 10), rnorm(30, mean = 50, sd = 8), rnorm(10, mean = 25, sd = 4))
hist(group_ages)


```

```{r}
# Assuming 'population_ages' is a vector containing the ages of the entire population
# and 'group_ages' is a vector containing the ages of the small group of people

# Calculate densities for both populations
population_density <- density(population_ages)
group_density <- density(group_ages)

# Calculate the ratio of densities
density_ratio <- group_density$y / population_density$y

# Plot the ratio histogram
plot(population_density$x, density_ratio, type = "h", lwd = 2, col = "blue", xlab = "Age", ylab = "Ratio of Densities", main = "Ratio Histogram")

# Add a reference line at ratio = 1 (no difference)
abline(h = 1, col = "red", lty = 2)

# Add a legend
legend("topright", legend = "Ratio", fill = "blue")

```

```{r}
# Assuming 'population_ages' is a vector containing the ages of the entire population
# and 'group_ages' is a vector containing the ages of the small group of people

# Calculate histograms for both populations
population_hist <- hist(population_ages, plot = FALSE)
group_hist <- hist(group_ages, plot = FALSE)

# Calculate the ratio of frequencies
frequency_ratio <- group_hist$counts / population_hist$counts

# Plot the ratio histogram
barplot(frequency_ratio, col = "blue", xlab = "Age", ylab = "Ratio of Frequencies", main = "Ratio Histogram")

# Add a reference line at ratio = 1 (no difference)
abline(h = 1, col = "red", lty = 2)

# Add age labels to x-axis
axis(1, at = seq_along(population_hist$breaks) - 0.5, labels = population_hist$breaks, las = 2)

# Add a legend
legend("topright", legend = "Ratio", fill = "blue")

```
