---
title: "Descriptive statistics"
format: 
  html:
    embed-resources: true
    theme: flatly
    toc: true
    toc-depth: 3
    toc-expand: 3
    toc-title: Contents
    smooth-scroll: true
editor: visual
---

```{r}
#| echo: false
#| include: false
library(dplyr)
library(ggplot2)
library(tidyr)
library(readxl)
library(kableExtra)
```

```{r}
#| echo: false

human_df <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/20240321-allPTMs-Human-separateProjects.csv", header = T)

human_complete <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_new.tsv", header = T, sep = '\t')

human_ptms <- human_df %>% filter(ptm_class == 'Post-translational')
```

# Exploration of the complete dataset

-   The raw data was analysed with ionbot v0.6.2. Precursor mass tolerance and fragment mass tolerance was 20ppm. Cys Carbamidomethylation was set as a fixed PTM and Met Oxidation was set as expected (variable) PTM. Furthermore, unexpected PTMs were searched for from among all modifications in UniMod. The enzyme was set to trypsin K\|R.

-   No discriminating principle was used when selecting the projects to re-process.

-   For each project, the detected modifications are listed, along with the class of the modification, the UNIMOD identifier, the number of PSMs for particular protein, the position of the amino acid, the amino acid where the modification was found.

    -   all of the modifications are labelled using [UniMod](https://www.unimod.org/modifications_list.php?goto=6) identifiers. Furthermore, the UniProt identifier of the protein on which the modification was found is listed, the amino acid on which the modification was found and the position of the amino acid. Finally, the total counts of the PSM spectra matches are also listed.

How many projects were analysed:

```{r}
#| echo: false
human_df %>% distinct(project_id) %>% dim()
```

## General questions

What are the most common classes of modifications?

```{r}
#| echo: false
#| warning: false

human_df %>% group_by(ptm_class) %>% 
  summarise(total_counts = sum(total_counts)) %>%
  ggplot(aes(x = reorder(ptm_class, total_counts), y = total_counts)) +
  geom_histogram(stat = 'identity', fill = '#919191') +
  scale_y_continuous(labels = scales::label_number(scale = 0.000001)) +
  labs(y = 'PSM counts in millions', x = 'Modification classes')+
  coord_flip() +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 11, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

How many unique proteins are there?

```{r}
#| echo: false
human_df %>% distinct(LeadEntry) %>% dim()
```

How many unique modifications?

```{r}
#| echo: false
human_df %>% distinct(ptm_name) %>% dim()
```

How many unique proteins?

```{r}
#| echo: false
human_df %>% distinct(project_id) %>% dim()
```

How many residues have been modified?

```{r}
#| echo: false
human_df %>% distinct(ptm_res) %>% dim()
```

## Project sizes

The projects on PRIDE vary in sizes, number of raw files, number of samples, number of patients, patient conditions etc.

What are the IDs of projects with the most modifications?

```{r}
#| echo: false
ptms_per_project <- human_ptms %>% 
  group_by(project_id) %>%
  summarise(total_counts = sum(total_counts)) %>% arrange(desc(total_counts))

ggplot(ptms_per_project[1:10,], aes(x = reorder(project_id, total_counts), y = total_counts)) +
  geom_bar(stat = 'identity', fill = '#919191') +
  scale_y_continuous(labels = scales::label_number(scale = 0.000001)) +
  coord_flip()+
  labs(y ='Number of PSM counts in millions', x = 'Project ID')+
  theme_classic(base_size = 12) 
```

What is the distribution of the number of modifications per project and the number of raw files per project.

```{r}
#| echo: false
df1 <- human_complete %>% group_by(project_id) %>%
  summarise(total_counts = sum(total_counts)) %>% 
  arrange(desc(total_counts)) %>% mutate(category = 'Modifications per project') %>%
  dplyr::select(total_counts, category)

df2 <- human_complete %>% group_by(raw_files_counts) %>%
  summarise(total_counts = sum(total_counts)) %>% 
  arrange(desc(total_counts)) %>% mutate(category = 'Raw files per project') %>%
  dplyr::select(total_counts, category)

df <- rbind(df1, df2)

ggplot(df, aes(x = category, y = total_counts)) +
  geom_boxplot(outliers = T, fill = '#919191') +
  scale_y_continuous(labels = scales::label_number(scale = 0.000001)) +
  labs(y = 'PSM counts in millions') +
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        legend.text = element_text(size = 11, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 11, family = "Lato"),  
        axis.title = element_text(size = 11, family = "Lato"))
  
#print('Outliers')
outliers <- boxplot.stats(df$total_counts)$out
print(outliers) # these the the PTM counts that were excluded
length(outliers)
```

What is the distribution of abundances?

```{r}
 
d <- human_complete %>% 
  dplyr::select(Uniprot_entry_name, abundance) %>% 
  distinct() 

ggplot(d,aes(y = abundance)) +
  geom_boxplot(outliers = F, fill = '#919191') +
  labs(y = 'PSM counts in millions') +
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.title.x = element_blank(),
        axis.ticks.x = element_blank(),
        legend.text = element_text(size = 11, family = "Lato"),
        axis.text = element_text(size = 11, family = "Lato"),  
        axis.title = element_text(size = 11, family = "Lato"))


```

How many outliers are there?

```{r}
outliers <- boxplot.stats(d$abundance)$out
print(outliers) # these the the PTM counts that were excluded
length(outliers)
```

# Post-translational

## General questions

How many unique proteins are there?

```{r}
#| echo: false
human_ptms %>% distinct(LeadEntry) %>% dim()
```

How many unique modifications?

```{r}
#| echo: false
human_ptms %>% distinct(ptm_name) %>% dim()
```

How many unique proteins?

```{r}
#| echo: false
human_ptms %>% distinct(project_id) %>% dim()
```

How many residues have been modified?

```{r}
#| echo: false
human_df %>% distinct(ptm_res) %>% dim()
```

What are the most common PTMs?

```{r}
#| echo: false

human_ptms_grouped_ptm <- human_ptms %>% 
  group_by(ptm_name) %>%
  summarise(total_counts = sum(total_counts)) %>%
  arrange(desc(total_counts))

ggplot(human_ptms_grouped_ptm[1:10,], aes(x = reorder(ptm_name, total_counts), y = total_counts)) +
  geom_bar(stat = "identity", fill = '#919191') +
  scale_y_continuous(labels = scales::label_number(scale = 0.000001)) +
  coord_flip()+
  labs(y ='Number of PSM counts in millions', x = 'Post-translational modifications')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 11, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 11, family = "Lato"),  
        axis.title = element_text(size = 11, family = "Lato"))
```

## Amino acid level

When looking at the dataset on the amino acid level, all of the amino acids have some type of modifications apart from leucine (L).

```{r}
#| echo: false
#| include: false
# which amino acids were modified. L is missing
human_ptms %>% distinct(ptm_res) 
```

It is also interesting to look at whether some amino acids get modified more than others. Serine is by far the most modified amino acid.

```{r}
#| echo: false

# number of modifications per residue
sum_AA_mod <- human_ptms %>% group_by(ptm_res) %>%
  summarise(total_counts = sum(total_counts))

ggplot(sum_AA_mod, aes(x = reorder(ptm_res, -total_counts), y = total_counts)) +
  geom_bar(stat = 'identity', fill = '#919191') +
  scale_y_continuous(labels = scales::label_number(scale = 0.000001)) +
  labs(x = 'Residue' , y = 'PSM counts in millions') +
  theme_classic()
```

However, when looking at the number of different PTMs per residue, we can see that lysine and cysteine are susceptible to a larger variety of PTMs compared to serine.

```{r}
#| echo: false

# number of different PTMs per residue
diff_PTMs_AA <- human_ptms %>%
  dplyr::select(ptm_res, ptm_name) %>%
  distinct() %>%
  group_by(ptm_res) %>%
  summarise(diff_PTMs = n())

ggplot(diff_PTMs_AA, aes(x = reorder(ptm_res, -diff_PTMs), y = diff_PTMs)) +
  geom_bar(stat = 'identity', fill = '#919191') +
  labs(x = 'Residue' , y = 'Number of different PTMs') +
  theme_classic()
```

Create a table with all of the modifications per amino acid:

```{r}
#| echo: false
human_ptms_grouped <- human_ptms %>%
  group_by(ptm_res) %>%
  summarize(PTMs = paste(unique(ptm_name), collapse = "; "))

#write.csv(x = human_ptms_grouped, file = '/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_ptms_grouped.csv', row.names = F, quote = F)
#write.table(human_complete, file = '/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_new.tsv', row.names = F, sep="\t", quote = F)
kable(human_ptms_grouped, caption = "Summary of PTMs by Residue")
```

## Protein level

In total there are 16665 unique proteins in the dataset.

```{r}
#| echo: false
#| include: false
human_ptms %>% distinct(LeadProt) %>% dim()
#human_ptms %>% distinct(LeadEntry) %>% dim()
```

When looking at the most commonly modified proteins, we can see that the top 10 most modified proteins include albumin (ALBU_HUMAN), collagen (CO1A1_HUMAN, CO1A2_HUMAN, CO3A1_HUMAN), actin (ACTB_HUMAN) etc. Only post-translational modifications were taken into account.

```{r}
#| echo: false
per_protein_ptms <- human_ptms %>%
  group_by(LeadEntry) %>%
  summarise(total_counts = sum(total_counts)) %>% arrange(desc(total_counts))

ggplot(per_protein_ptms[1:10,], aes(x = reorder(LeadEntry, total_counts), y = total_counts)) +
  geom_bar(stat = 'identity', fill = '#919191') +
  scale_y_continuous(labels = scales::label_comma(scale = 0.001)) +
  coord_flip()+
  labs(y ='Number of PSM counts in thousands', x = 'UniProt entry name')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 11, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 11, family = "Lato"),  
        axis.title = element_text(size = 11, family = "Lato"))
```

Throughout this notebook, only raw counts were used. However this does not take into account the varying sample sizes within each project, the increased chances of a protein being modified if it is longer or has a high level of expression in cells. Therefore, normalisation is required.
