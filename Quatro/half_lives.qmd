---
title: "PTMs and half-lives"
format: 
  html:
    embed-resources: true
    theme: flatly
    toc: true
    toc-depth: 3
    toc-expand: 3
    toc-title: Contents
    smooth-scroll: true
editor: visual
---

```{r}
#| echo: false
#| include: false
#| warning: false

library(dplyr)
library(ggplot2)
library(tidyr)
library(readxl)
library(kableExtra)
library(ggpubr)
library(plotly)
library(stringr)
library(scales)
library(survey)
```

```{r}
#| echo: false
#| include: false

#THIS LOADS THE NEW DATASET
human_complete <- read.csv(file = "/Users/anastasialinchik/Desktop/Thesis/DATA/generated/human_new.tsv", header = T, sep = '\t')

human_ptms <- human_complete %>% filter(ptm_class == 'Post-translational')

#leadprot_uniprot <- human_complete %>% dplyr::select(Uniprot_entry_name, LeadProt) %>% distinct()

# MODIFICATIONS
oxPTMs <- read_excel(path = '/Users/anastasialinchik/Desktop/Thesis/table_oxPTMs.xlsx', sheet = 'oxPTMs')
oxPTMs <- oxPTMs %>%
  mutate(AAs_list = str_split(Specificity, ", ")) %>% dplyr::select(`Unimod #`, AAs_list) %>% rename(unimod_id = `Unimod #`)

lysine_acylation <- c(122, 1, 58, 1289, 747, 64)
AGE <- c(6, 907, 378)
```

-   It is assumed that each protein only has one modification. The proteins with no modifications are not identified.

-   Protein half-lives for short lived proteins can be found here: [Proteome-wide mapping of short-lived proteins in human cells - ScienceDirect (e-bronnen.be)](https://www-sciencedirect-com.kuleuven.e-bronnen.be/science/article/pii/S1097276521007498#app2)

-   Protein half-lives of long-lived proteins can be found here: [Systematic analysis of protein turnover in primary cells \| Nature Communications](https://www.nature.com/articles/s41467-018-03106-1#Sec6)

```{r}
#| echo: false
#| include: false
short_lived_proteins_hl <- read_excel(path = '/Users/anastasialinchik/Desktop/Thesis/DATA/short_lived_proteins_hl.xlsx', sheet = 'HEK293T') %>% dplyr::select(`Uniprot ID`, `Half-life`) %>% rename(LeadProt = `Uniprot ID`, mean_hl_hours = `Half-life`)

long_lived_proteins_hl <- read.csv(file = '/Users/anastasialinchik/Desktop/Thesis/DATA/generated/long_proteins_hl_grouped.tsv', sep = '\t', header = T)

human_ptms_hl_short <- inner_join(human_ptms, short_lived_proteins_hl, by = join_by(LeadProt))

human_complete_hl_short <- inner_join(human_complete, short_lived_proteins_hl, by = join_by(LeadProt))
```

Check that phosphorylation is the most abundant (literature).

```{r}
#| echo: false
q2 <- human_ptms_hl_short %>% group_by(ptm_name) %>%
  summarise(sum = sum(counts_norm_abund_len)) %>% arrange(desc(sum))
ggplot(q2[1:10,], aes(x = reorder(ptm_name, sum), y = sum)) +
  coord_flip() +
  geom_col(fill = '#919191') +
  labs(y = 'Sum of normalised counts', x = 'Modifications')+
  theme_classic() +
  theme(
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

# Proteins with a short half-life

Proteins can have varying half-lives.

Below is a comparison of the distribution of the half-lives that was found in literature and the distribution of a subset of those half-lives in the proteins found in the dataset. (no outliers were removed yet)

```{r}
#| echo: false
#| warning: false
ggplot() +
  geom_density(data = short_lived_proteins_hl, aes(x = mean_hl_hours, fill = 'Data found by Li et al.'), alpha = 0.7, bw = 0.6) +
  geom_density(data = human_ptms_hl_short, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = 'Re-processed dataset'), alpha = 0.7, bw = 0.6) + 
  labs(x = 'Mean half-lives (hours)', y = 'Density') +
  theme_classic() +
  scale_fill_manual(values = c("white", '#919191'),breaks = c('Data found by Li et al.', 'Re-processed dataset')) +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 16, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 16, family = "Lato"),  
        axis.title = element_text(size = 16, family = "Lato"))
```

## Outliers

I want to remove the proteins with a very high number of log10(counts_norm_abund_len).

Detecting the outliers:

```{r}
#| echo: false
human_ptms_hl_short %>% group_by(LeadProt) %>% summarise(sum = log10(sum(counts_norm_abund_len))) %>%
  ggplot(aes(sum)) +
  geom_boxplot() +
  labs(x = 'Log of the sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 16, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 16, family = "Lato"),  
        axis.title = element_text(size = 16, family = "Lato"))
```

```{r}
#| echo: false
data <- human_ptms_hl_short %>% group_by(Uniprot_entry_name) %>% summarise(sum_log = log10(sum(counts_norm_abund_len)))

# Calculate Q1, Q3, and IQR
Q1 <- quantile(data$sum_log, 0.25)
Q3 <- quantile(data$sum_log, 0.75)
IQR <- Q3 - Q1

# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# Filter outliers
outliers <- data %>%
  filter(sum_log > upper_bound | sum_log < lower_bound)

print('Dimensions BEFORE removing the outliers')
dim(human_ptms_hl_short)
human_ptms_hl_short <- human_ptms_hl_short %>% filter(!Uniprot_entry_name %in% outliers$Uniprot_entry_name)
print('Dimensions AFTER removing the outliers')
dim(human_ptms_hl_short)
```

The outliers have been removed now. What is the resulting distribution?

```{r}
#| echo: false
ggplot() +
  geom_density(data = short_lived_proteins_hl, aes(x = mean_hl_hours, fill = 'Data found by Li et al.'), alpha = 0.7, bw = 0.6) +
  geom_density(data = human_ptms_hl_short, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = 'Re-processed dataset'), alpha = 0.7, bw = 0.6) + 
  geom_vline(xintercept = 8) +
  geom_vline(xintercept = 11) +
  labs(x = 'Mean half-lives (hours)', y = 'Density') +
  theme_classic() +
  scale_fill_manual(values = c("white", '#919191'),breaks = c('Data found by Li et al.', 'Re-processed dataset') ,name = 'Key') +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 16, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 16, family = "Lato"),  
        axis.title = element_text(size = 16, family = "Lato"))
```

Looking in more detail

What are the most modified proteins?

```{r}
mod <- human_ptms_hl_short %>% 
  group_by(Uniprot_entry_name) %>% 
  summarise(sum = sum(counts_norm_abund_len)) %>% 
  arrange(desc(sum))

mod[1:5,]
```

Looking at a particular half-life range:

```{r}
#| echo: false
#| eval: false

# This is to check the proteins present in a particular half-life interval:
df <- human_ptms_hl_short %>% filter(mean_hl_hours > 8 & mean_hl_hours < 11) %>% group_by(Uniprot_entry_name) %>% summarise(sum_norm_counts = sum(counts_norm_abund_len)) %>% arrange(desc(sum_norm_counts)) 

ggplot(df[1:50,], aes(x = reorder(Uniprot_entry_name, -sum_norm_counts), y = sum_norm_counts)) +
  geom_col() +
  labs(x = 'UniProt accession', y = 'Sum of normalised counts') +
  theme_classic()
```

```{r}
write.table(df$Uniprot_entry_name, file = '/Users/anastasialinchik/Downloads/proteins.tsv', row.names = F, sep="\t", quote = F)
```

```{r}
#| echo: false
#| eval: false

# These are the modifications for a particular protein: 
hspb1 <- inner_join(human_ptms, short_lived_proteins_hl, by = join_by(LeadProt)) %>% filter(Uniprot_entry_name == 'EAPP_HUMAN') %>% group_by(ptm_name) %>% summarise(sum = sum(counts_norm_abund_len)) %>% arrange(desc(sum))

ggplot(hspb1[1:10,], aes(y = reorder(ptm_name, sum), x = sum)) +
  geom_col(fill = '#919191') +
  labs(x = 'Sum of the normalised PSM counts', y = 'Modification [unimod ID]') +
  theme_classic() +
  theme(
        axis.text = element_text(size = 16, family = "Lato"),  
        axis.title = element_text(size = 16, family = "Lato"))
```

## 

## PTMs

PTMs of interest:

-   PTMs that control autophagy

    -   phosphorylation

    -   ubiquitination -\> need to use the new dataset

    -   acetylation

-   oxPTMs

    -   you have a list of these

-   Methylation eg of histones

-   K Acylation -\> need to get this from [this paper](https://www.nature.com/articles/s41598-020-64265-0)

-   AGEs as markers of ageing

### Phosphorylation

This is already without outliers

-   Only the modification \[21\]Phospho is present here.

Splitting the dataset in a group with phosphorylation proteins and another group with all remaining proteins.

```{r}
#| echo: false
#| include: false

# The distribution is not printed.

human_ptms_hl_mod_group <- human_ptms_hl_short
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_short$unimod_id == 21, 'Phosphorylated', 'Non-phosphorylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-phosphorylated", "Phosphorylated"))

# all of the proteins that get phosphorylated
pho_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Phosphorylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get phosphorylated are not included in the Non-phosphorylated section

human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Phosphorylated' | (mod_group == 'Non-phosphorylated' & (!LeadProt %in% pho_prot$LeadProt)))

# plotting the distribution
ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Density')+
  scale_fill_manual(values = c("white", '#b3de69')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

It is not necessary to include another density line with all of the proteins. You can just compare the two distributions.

Comparison

```{r}
#| echo: false
#| warning: false
#| message: false

p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-phosphorylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Phosphorylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#b3de69')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

Testing whether the half-lives between groups are significantly different. Wilcoxon test (note that the sample sizes are uneven). The p value was adjusted using the formula p\*sqrt(N/100), where N = n1+ n2.

```{r}
#| echo: false

# There are no clusters and no strata. The weights are the sums. The two groups are the phosphorylated proteins and non-phosphorylated proteins. 

# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest (from the group of KruskalWallis tests. But for 2 groups, it is equal to the Mann–Whitney U test)

svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('adjusted p-value (Good\'s Bayes adjustment)')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

```{r}
# This is to check the proteins present in a particular half-life interval:
df <- p1 %>% filter(mean_hl_hours > 6 & mean_hl_hours < 10) %>%  arrange(desc(sum)) 

ggplot(df[1:7,], aes(x = reorder(Uniprot_entry_name, -sum), y = sum)) +
  geom_col() +
  labs(x = 'UniProt accession', y = 'Sum of normalised counts') +
  theme_classic()
```

### Acetylation

-   Filtered by the \[1\]Acetyl modification.

```{r}
#| echo: false
#| include: false
human_ptms_hl_mod_group <- human_ptms_hl_short 
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 1, 'Acetylated', 'Non-acetylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-acetylated", "Acetylated"))

# all of the proteins that get acetylated
acetyl_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Acetylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get methylated are not included in the non-meth section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Acetylated' | (mod_group == 'Non-acetylated' & (!LeadProt %in% acetyl_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-acetylated' = "white", 'Acetylated' = '#8dd3c7')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-acetylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Acetylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#8dd3c7')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### Ubiquitination

Ubiquitination has the classification 'Other'. Take that as one group. The second group is all of the PTMs. 890 proteins overlap so you have 289 proteins taht are not ubiquitinated and have PTMs and we know their half-lives. These make up the second group.

```{r}
#| echo: false
#| include: false
ubi_prot <- human_complete %>% filter(unimod_id == 121) %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_short
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, ubi_prot)

human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 121, 'Ubiquitinated', 'Non-ubiquitinated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-ubiquitinated", "Ubiquitinated"))

# all of the proteins that get ubiquitinated
ubi_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Ubiquitinated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get ubiquitinated are not included in the non-oxi section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Ubiquitinated' | (mod_group == 'Non-ubiquitinated' & (!LeadProt %in% ubi_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-ubiquitinated' = "white", 'Ubiquitinated' = '#bebada')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

```{r}
#| warning: false
#| echo: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-ubiquitinated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Ubiquitinated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#bebada')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### Methylation

-   Filtered by the \[34\]Methyl modification

```{r}
#| echo: false
#| include: false
human_ptms_hl_mod_group <- human_ptms_hl_short
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 34, 'Methylated', 'Non-methylated')
human_ptms_hl_mod_group <- human_ptms_hl_mod_group 

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-methylated", "Methylated"))

# all of the proteins that get methylated
meth_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Methylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get methylated are not included in the non-meth section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Methylated' | (mod_group == 'Non-methylated' & (!LeadProt %in% meth_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean protein half-life (hours)', y = 'Density')+
  scale_fill_manual(values = c('Non-methylated' = "white", 'Methylated' = '#80b1d3')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.83,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

Violin plots

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-methylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Methylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#80b1d3')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### oxPTMs

This is only for proteins that are related to ageing.

All PTMs related to oxidative damage in general, not only oxidation.

```{r}
#| echo: false
#| eval: false
a <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-oxPTMs') %>% dplyr::select(Uniprot_entry_name)
human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'oxPTMs') %>% filter(Uniprot_entry_name %in% a$Uniprot_entry_name)
```

```{r}
#| echo: false
#| include: false

oxPTMs_prot <- human_complete %>% filter(unimod_id %in% oxPTMs$unimod_id & ptm_res %in% oxPTMs$AAs_list) %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))
dim(oxPTMs_prot)
human_ptms_hl_mod_group <- human_ptms_hl_short
dim(human_ptms_hl_mod_group)
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, oxPTMs_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% oxPTMs$unimod_id & human_ptms_hl_mod_group$ptm_res %in% oxPTMs$AAs_list), 'oxPTMs', 'Non-oxPTMs')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-oxPTMs", "oxPTMs"))
dim(human_ptms_hl_mod_group %>% filter(mod_group == 'oxPTMs'))
dim(human_ptms_hl_mod_group %>% filter(mod_group == 'Non-oxPTMs'))
# all of the proteins that get oxPTMs
oxPTMs_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'oxPTMs') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get oxPTMs are not included in the non-oxPTMs section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'oxPTMs' | (mod_group == 'Non-oxPTMs' & (!LeadProt %in% oxPTMs_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-oxPTMs' = "white", 'oxPTMs' = '#fdb462')) +
  theme_classic() 
```

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-oxPTMs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'oxPTMs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.1,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#fdb462')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### Lysine acylations

```{r}
#| echo: false
#| include: false

Kacylation_prot <- human_complete %>% filter(unimod_id %in% lysine_acylation & ptm_res == 'K') %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_short
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, Kacylation_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% lysine_acylation & human_ptms_hl_mod_group$ptm_res == 'K'), 'K acylation', 'Non-acylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-acylated", "K acylation"))

# all of the proteins that get K acylated
Kacylation_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'K acylation') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get K acylated are not included in the non-acylated section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'K acylation' | (mod_group == 'Non-acylated' & (!LeadProt %in% Kacylation_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-acylated' = "white", 'K acylation' = '#fb8072')) +
  theme_classic() 
```

Violin plot

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-acylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'K acylation') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#fb8072')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### AGEs

```{r}
#| echo: false
#| include: false

AGEs_prot <- human_complete %>% filter(unimod_id %in% AGE & ptm_res == 'K') %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_short
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, AGEs_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% AGE & human_ptms_hl_mod_group$ptm_res == 'K'), 'AGEs', 'Non-AGEs')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-AGEs", "AGEs"))

# all of the proteins that get K acylated
AGEs_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'AGEs') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get K acylated are not included in the non-acylated section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'AGEs' | (mod_group == 'Non-AGEs' & (!LeadProt %in% AGEs_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-AGEs' = "white", 'AGEs' = '#fccde5')) +
  theme_classic() 
```

Violin plots

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-AGEs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'AGEs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#fccde5')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

## Binning

**Hypothesis**: The higher the half-life, the greater the number of PTMs.

Phosphorylation

oxPTMs

methylation

Ubiquitination, acetylation, lysine, AGEs

General:

```{r}
#| echo: false
#| warning: false
#| message: false
df <- human_ptms_hl_short %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 5 ~ "0-5",
    mean_hl_hours <= 10 ~ "5-10",
    mean_hl_hours <= 15 ~ "10-15",
    mean_hl_hours <= 20 ~ "15-20",
    TRUE ~ "20+"
  ))

mean_counts_per_mt_group <- df %>%
  group_by(Uniprot_entry_name, hl_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len)) %>% 
  filter(!hl_group == '-') %>%
  distinct() %>% group_by(hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

# Plot bar chart
ggplot(mean_counts_per_mt_group, aes(x = hl_group, y = mean_ptms_group)) +
  geom_bar(stat = "identity", fill = '#919191') +
  scale_x_discrete(limits = c("0-5", "5-10", "10-15", "15-20", "20+")) +
  scale_y_continuous(labels = scales::label_number(scale = 1)) +
  labs(x = "Half-lives (hours)",
       y = "Mean normalised counts") +
  theme_classic() +
  theme(
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

Broken down by the modifications

```{r}
#| echo: false
#| warning: false

ubi_prot <- human_complete %>% filter(unimod_id == 121) %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))
df <- rbind(human_ptms_hl_short, ubi_prot)

a <- human_complete %>% filter(unimod_id %in% c(lysine_acylation, AGE)) %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt))
df <- rbind(df, a)

df <- df %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 5 ~ "0-5",
    mean_hl_hours <= 10 ~ "5-10",
    mean_hl_hours <= 15 ~ "10-15",
    mean_hl_hours <= 20 ~ "15-20",
    TRUE ~ "20+"
  )) %>%
  mutate(mod_group = case_when(
    unimod_id == 1 ~'Acetylated',
    unimod_id == 121 ~'Ubiquitinated',
    unimod_id %in% AGE ~ 'AGE',
    (unimod_id %in% lysine_acylation & ptm_res == 'K') ~ 'K acylation',
    unimod_id == 34 ~'Methylated',
    TRUE ~ "-"
  ))

mean_hours_per_hl_group <- df %>%
  group_by(Uniprot_entry_name, mod_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len), hl_group) %>% 
  filter(!mod_group == '-') %>%
  distinct() %>% group_by(mod_group, hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

mod_group_colours <- c('Acetylated' = '#8dd3c7', 'AGE' = '#fccde5', 'Ubiquitinated' = '#bebada', 'K acylation' = '#fb8072', 'Methylated' = '#80b1d3')

# Plot bar chart
ggplot(mean_hours_per_hl_group, aes(x = hl_group, y = mean_ptms_group, fill = mod_group)) +
  geom_bar(stat = "identity", position = 'dodge') +
  scale_x_discrete(limits = c("0-5", "5-10", "10-15", "15-20", "20+")) +
  scale_y_continuous(limits = c(0,0.0017), labels = scales::label_number(scale = 1e3)) +
  scale_fill_manual(values = mod_group_colours) +
  labs(x = "Half-lives (hours)",
       y = "Mean normalised counts (scaled by 1e3)") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 13, family = "Lato"),
        legend.position = c(0.5,0.9), 
        legend.direction = 'horizontal',
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

Check the number of proteins in each bin.

```{r}
#| echo: false
df %>% dplyr::select(Uniprot_entry_name, hl_group) %>% distinct() %>%
  group_by(hl_group) %>% summarise(protein_count = n())
```

oxPTMs + phospho

```{r}
#| echo: false
#| warning: false

oxptms_prot <- human_complete %>% filter(unimod_id %in% oxPTMs$unimod_id) %>% inner_join(short_lived_proteins_hl, by = join_by(LeadProt)) %>% filter(!ptm_class == 'Post-translational') 
df <- rbind(human_ptms_hl_short, oxptms_prot)

df <- df %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 5 ~ "0-5",
    mean_hl_hours <= 10 ~ "5-10",
    mean_hl_hours <= 15 ~ "10-15",
    mean_hl_hours <= 20 ~ "15-20",
    TRUE ~ "20+"
  )) %>%
  mutate(mod_group = case_when(
    (unimod_id %in% oxPTMs$unimod_id & ptm_res %in% oxPTMs$AAs_list) ~ 'oxPTMs',
    unimod_id == 21 ~'Phosphorylated',
    TRUE ~ "-"
  ))

mean_hours_per_hl_group <- df %>%
  group_by(Uniprot_entry_name, mod_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len), hl_group) %>% 
  filter(!mod_group == '-') %>%
  distinct() %>% group_by(mod_group, hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

mod_group_colours <- c('oxPTMs' = '#fdb462', 'Phosphorylated' = '#b3de69')

# Plot bar chart
ggplot(mean_hours_per_hl_group, aes(x = hl_group, y = mean_ptms_group, fill = mod_group)) +
  geom_bar(stat = "identity", position = 'dodge') +
  scale_x_discrete(limits = c("0-5", "5-10", "10-15", "15-20", "20+")) +
  scale_y_continuous( limits = c(0, 0.015),labels = scales::label_number(scale = 1e3)) +
  scale_fill_manual(values = mod_group_colours) +
  labs(x = "Half-lives (hours)",
       y = "Mean normalised counts (scaled by 1e3)") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 13, family = "Lato"),
        legend.position = c(0.73,0.9), 
        legend.direction = 'horizontal',
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

```{r}
#| echo: false
b <- df %>% dplyr::select(Uniprot_entry_name, hl_group, mod_group) %>% distinct() %>%
  group_by(hl_group, mod_group) %>% summarise(protein_count = n())
b
```

```{r}
#| echo: false
#| eval: false
df1 <- df %>% filter(!Uniprot_entry_name %in% c('CFA70_HUMAN', 'SHLD3_HUMAN', 'PO4F1_HUMAN')) %>%
  inner_join(protein_abundances, by = join_by(`Uniprot_entry_name` == `UniProt`)) %>%
  mutate(counts_norm_abund = norm_counts/abundance)


mean_hours_per_hl_group <- df1 %>%
  group_by(hl_group, mod_group) %>%
  summarize(mean_ptms_group = mean(counts_norm_abund)) %>% 
  filter(!mod_group == '-') %>%
  distinct()


# Plot bar chart
ggplot(mean_hours_per_hl_group, aes(x = hl_group, y = mean_ptms_group, fill = mod_group)) +
  geom_bar(stat = "identity", position = 'dodge') +
  scale_x_discrete(limits = c("0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30+")) +
  scale_fill_manual(values = mod_group_colours, name = 'Key') +
  labs(x = "Half-lives (hours)",
       y = "Mean sum of normalised PTM counts") +
  theme_classic()
```

```{r}
#| echo: false
#| eval: false
human_ptms_hl_short %>% filter(mean_hl_hours > 5 & mean_hl_hours< 10) %>% inner_join(protein_abundances, by = join_by(`Uniprot_entry_name` == `UniProt`)) %>%
  mutate(counts_norm_abund = norm_counts/abundance) %>% group_by(Uniprot_entry_name) %>% summarise(sum_counts = sum(counts_norm_abund)) %>% arrange(desc(sum_counts))
```

# Binning by the number of PTMs

```{r}
#| echo: false
#| message: false
#| warning: false
bins <- human_ptms_hl_short %>% group_by(Uniprot_entry_name) %>% summarise(mean_hl_hours, sum_norm_counts = sum(counts_norm_abund_len)) %>% distinct() %>% arrange(desc(sum_norm_counts))
bound <- dim(bins)[1]
bin1 <- bins[1:as.integer(bound/3), ]
bin2 <- bins[as.integer(bound/3 + 1):as.integer(bound/3*2), ]
bin3 <- bins[as.integer(bound/3*2+1):bound, ]

bin1$bin <- 'High'
bin2$bin <- 'Medium'
bin3$bin <- 'Low'

bins <- rbind(bin1, bin2, bin3)
bins$bin <- factor(bins$bin, levels = c("Low", "Medium", "High"))
ggplot(bins, aes(x = mean_hl_hours)) +
  geom_histogram(fill = '#919191') +
  labs(x = 'Half-life (hours)', y = 'Protein counts') +
  facet_wrap(~bin) +
  theme_bw() +
  theme(
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        strip.text = element_text(size = 13, family = "Lato"),
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"),
        strip.background.x = element_blank()
        )
```

```{r}
#| echo: false
ks_test_result <- ks.test(bin1$mean_hl_hours, bin3$mean_hl_hours)

# Print the test result
print(ks_test_result)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| eval: false
bins <- bin3
bound <- dim(bins)[1]
bin1 <- bins[1:as.integer(bound/3), ]
bin2 <- bins[as.integer(bound/3 + 1):as.integer(bound/3*2), ]
bin3 <- bins[as.integer(bound/3*2+1):bound, ]

bin1$bin <- 'High'
bin2$bin <- 'Medium'
bin3$bin <- 'Low'

bins <- rbind(bin1, bin2, bin3)
bins$bin <- factor(bins$bin, levels = c("Low", "Medium", "High"))
ggplot(bins, aes(x = mean_hl_hours)) +
  geom_histogram(fill = '#919191') +
  labs(x = 'Half-life (hours)', y = 'Protein counts') +
  facet_wrap(~bin) +
  theme_bw() +
  theme(
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        strip.text = element_text(size = 13, family = "Lato"),
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"),
        strip.background.x = element_blank()
        )
```

# Proteins with a long half-life

Long-lived proteins can be used as estimators of chronological age. Long-lived proteins can be defined in different ways, for example based on the half-life of the protein when compared to the average half-life of proteins in the organism. In this case, long-lived proteins were obtained from the following study: [paper](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3788602/). Proteins were classified as long-lived based on their degree of degradation during the experiment and therefore it was possible to discover new long-lived proteins (no *a priori* assumptions were made).

The study identified a list of long-lived proteins in rats, therefore human orthologs of these proteins were found.

```{r}
#| echo: false
human_ptms_hl_long <- inner_join(human_ptms, long_lived_proteins_hl, by = join_by(LeadProt))
# How many unique proteins?
#dim(human_ptms_hl_long %>% distinct(LeadProt))

human_complete_hl_long <- inner_join(human_complete, long_lived_proteins_hl, by = join_by(LeadProt))
```

Plot the data distributions

```{r}
#| echo: false
#| warning: false

ggplot() +
  geom_density(data = long_lived_proteins_hl, aes(x = mean_hl_hours, fill = 'Data found by Mathieson et al.'), alpha = 0.7, bw = 8) +
  geom_density(data = human_ptms_hl_long, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = 'Re-processed dataset'), alpha = 0.7, bw = 8) + 
  labs(x = 'Mean half-lives (hours)', y = 'Density') +
  theme_classic() +
  scale_x_continuous(limits = c(0,1000)) +
  scale_fill_manual(values = c("white", '#919191'),breaks = c('Data found by Mathieson et al.', 'Re-processed dataset') ,name = 'Key') +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 14, family = "Lato"),
        legend.position = c(0.7,0.9), 
        axis.text = element_text(size = 14, family = "Lato"),  
        axis.title = element_text(size = 14, family = "Lato"))
```

## Outliers

```{r}
#| echo: false
human_ptms_hl_long %>% group_by(LeadProt) %>% summarise(sum = log10(sum(counts_norm_abund_len))) %>%
  ggplot(aes(sum)) +
  geom_boxplot() +
  labs(x = 'Log of the sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

```{r}
#| echo: false
data <- human_ptms_hl_long %>% group_by(Uniprot_entry_name) %>% summarise(sum_log = log10(sum(counts_norm_abund_len)))

# Calculate Q1, Q3, and IQR
Q1 <- quantile(data$sum_log, 0.25)
Q3 <- quantile(data$sum_log, 0.75)
IQR <- Q3 - Q1

# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.39 * IQR

# Filter outliers
outliers <- data %>%
  filter(sum_log > upper_bound | sum_log < lower_bound)

print('Dimensions BEFORE removing the outliers')
dim(human_ptms_hl_long)
human_ptms_hl_long <- human_ptms_hl_long %>% filter(!Uniprot_entry_name %in% outliers$Uniprot_entry_name)
print('Dimensions AFTER removing the outliers')
dim(human_ptms_hl_long)
```

All of the outliers have been removed.

Check the distribution of the half-lives:

```{r}
#| echo: false
ggplot(human_ptms_hl_long, aes(mean_hl_hours)) +
  geom_boxplot() +
  labs(x = 'Sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

Also need to remove the proteins with very large half-lives (The proteins with short half-lives were not removed even if there were identified as outliers):

```{r}
#| echo: false
data <- human_ptms_hl_long 

# Calculate Q1, Q3, and IQR
Q1 <- quantile(data$mean_hl_hours, 0.25)
Q3 <- quantile(data$mean_hl_hours, 0.75)
IQR <- Q3 - Q1

# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# Filter outliers
outliers <- data %>%
  filter(mean_hl_hours > upper_bound)

print('Dimensions BEFORE removing the outliers')
dim(human_ptms_hl_long)
human_ptms_hl_long <- human_ptms_hl_long %>% filter(!Uniprot_entry_name %in% outliers$Uniprot_entry_name)
print('Dimensions AFTER removing the outliers')
dim(human_ptms_hl_long)
```

Now the exact same thing but for \`human_complete_hl_long\`

```{r}
#| echo: false
human_complete_hl_long %>% group_by(LeadProt) %>% summarise(sum = log10(sum(counts_norm_abund_len))) %>%
  ggplot(aes(sum)) +
  geom_boxplot() +
  labs(x = 'Log of the sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))


data <- human_complete_hl_long %>% group_by(Uniprot_entry_name) %>% summarise(sum_log = log10(sum(counts_norm_abund_len)))

# Calculate Q1, Q3, and IQR
Q1 <- quantile(data$sum_log, 0.25)
Q3 <- quantile(data$sum_log, 0.75)
IQR <- Q3 - Q1

# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# Filter outliers
outliers <- data %>%
  filter(sum_log > upper_bound | sum_log < lower_bound)

human_complete_hl_long <- human_complete_hl_long %>% filter(!Uniprot_entry_name %in% outliers$Uniprot_entry_name)

human_complete_hl_long %>% group_by(LeadProt) %>% summarise(sum = log10(sum(counts_norm_abund_len))) %>%
  ggplot(aes(sum)) +
  geom_boxplot() +
  labs(x = 'Log of the sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))

ggplot(human_complete_hl_long, aes(mean_hl_hours)) +
  geom_boxplot() +
  labs(x = 'Sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))

data <- human_complete_hl_long 

# Calculate Q1, Q3, and IQR
Q1 <- quantile(data$mean_hl_hours, 0.25)
Q3 <- quantile(data$mean_hl_hours, 0.75)
IQR <- Q3 - Q1

# Define lower and upper bounds
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR

# Filter outliers
outliers <- data %>%
  filter(mean_hl_hours > upper_bound)

human_complete_hl_long <- human_complete_hl_long %>% filter(!Uniprot_entry_name %in% outliers$Uniprot_entry_name)

ggplot(human_complete_hl_long, aes(mean_hl_hours)) +
  geom_boxplot() +
  labs(x = 'Sum of normalised counts')+
  theme_classic() +
  theme(legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

(Note that the dataset with the original data still has the proteins with very large half-lives so the scale needs to be based on the subset, not the original set)

```{r}
#| echo: false
#| warning: false
ggplot() +
  geom_density(data = long_lived_proteins_hl, aes(x = mean_hl_hours, fill = 'Data found by Mathieson et al.'), alpha = 0.7, bw = 5) +
  geom_density(data = human_ptms_hl_long, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = 'Re-processed dataset'), alpha = 0.7, bw = 5) + 
  geom_vline(xintercept = 30) +
  geom_vline(xintercept = 100) +
  scale_x_continuous(limits = c(0,max(human_ptms_hl_long$mean_hl_hours))) +
  labs(x = 'Mean half-lives (hours)', y = 'Density') +
  theme_classic() +
  scale_fill_manual(values = c("white", '#919191'),breaks = c('Data found by Mathieson et al.', 'Re-processed dataset') ,name = 'Key') +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 14, family = "Lato"),
        legend.position = c(0.75,0.9), 
        axis.text = element_text(size = 14, family = "Lato"),  
        axis.title = element_text(size = 14, family = "Lato"))
```

Looking in more detail

What are the most modified proteins?

```{r}
mod <- human_ptms_hl_short %>% 
  group_by(Uniprot_entry_name) %>% 
  summarise(sum = sum(counts_norm_abund_len)) %>% 
  arrange(desc(sum))

mod[1:5,]
```

Looking at a particular half-life range:

```{r}
#| echo: false
#| eval: false

# This is to check the proteins present in a particular half-life interval:
df <- human_ptms_hl_long %>% filter(mean_hl_hours > 300 & mean_hl_hours < 500) %>% group_by(Uniprot_entry_name) %>% summarise(sum_norm_counts = sum(counts_norm_abund_len)) %>% arrange(desc(sum_norm_counts)) 

ggplot(df[1:10,], aes(x = reorder(Uniprot_entry_name, -sum_norm_counts), y = sum_norm_counts)) +
  geom_col() +
  labs(x = 'UniProt accession', y = 'Sum of normalised counts') +
  theme_classic()
```

```{r}
write.table(df$Uniprot_entry_name, file = '/Users/anastasialinchik/Downloads/proteins.tsv', row.names = F, sep="\t", quote = F)
```

```{r}
#| echo: false
#| eval: false

# These are the modifications for a particular protein: 
hspb1 <- inner_join(human_ptms, short_lived_proteins_hl, by = join_by(LeadProt)) %>% filter(Uniprot_entry_name == 'EAPP_HUMAN') %>% group_by(ptm_name) %>% summarise(sum = sum(counts_norm_abund_len)) %>% arrange(desc(sum))

ggplot(hspb1[1:10,], aes(y = reorder(ptm_name, sum), x = sum)) +
  geom_col(fill = '#919191') +
  labs(x = 'Sum of the normalised PSM counts', y = 'Modification [unimod ID]') +
  theme_classic() +
  theme(
        axis.text = element_text(size = 16, family = "Lato"),  
        axis.title = element_text(size = 16, family = "Lato"))
```

## 

## PTMs

### Phosphorylation

```{r}
#| echo: false
#| warning: false
#| include: false

human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_long$unimod_id == 21, 'Phosphorylated', 'Non-phosphorylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-phosphorylated", "Phosphorylated"))

# all of the proteins that get phosphorylated
pho_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Phosphorylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get phosphorylated are not included in the Non-phosphorylated section

human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Phosphorylated' | (mod_group == 'Non-phosphorylated' & (!LeadProt %in% pho_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean half-life (hours)', y = 'Density')+
  scale_fill_manual(values = c("white", '#b3de69')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

Violin plot:

```{r}
#| echo: false
#| warning: false

p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-phosphorylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Phosphorylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#b3de69')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

```{r}
# This is to check the proteins present in a particular half-life interval:
df <- p1 %>%  arrange(desc(sum)) 

ggplot(df[1:7,], aes(x = reorder(Uniprot_entry_name, -sum), y = sum)) +
  geom_col() +
  labs(x = 'UniProt accession', y = 'Sum of normalised counts') +
  theme_classic()
```

### Acetylation

```{r}
#| echo: false
#| include: false
human_ptms_hl_mod_group <- human_ptms_hl_long 
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 1, 'Acetylated', 'Non-acetylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-acetylated", "Acetylated"))

# all of the proteins that get acetylated
acetyl_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Acetylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get methylated are not included in the non-meth section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Acetylated' | (mod_group == 'Non-acetylated' & (!LeadProt %in% acetyl_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-acetylated' = "white", 'Acetylated' = '#8dd3c7')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

Violin plot:

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-acetylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Acetylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#8dd3c7')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### Ubiquitination

```{r}
#| echo: false
#| include: false
ubi_prot <- human_complete_hl_long %>% filter(unimod_id == 121)

human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, ubi_prot)

human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 121, 'Ubiquitinated', 'Non-ubiquitinated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-ubiquitinated", "Ubiquitinated"))

# all of the proteins that get oxidised
ubi_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Ubiquitinated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get oxidised are not included in the non-oxi section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Ubiquitinated' | (mod_group == 'Non-ubiquitinated' & (!LeadProt %in% ubi_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-ubiquitinated' = "white", 'Ubiquitinated' = '#bebada')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.8,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

Violin plot

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-ubiquitinated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Ubiquitinated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#bebada')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### Methylation

```{r}
#| echo: false
#| include: false
human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group$mod_group <- if_else(human_ptms_hl_mod_group$unimod_id == 34, 'Methylated', 'Non-methylated')
human_ptms_hl_mod_group <- human_ptms_hl_mod_group 

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-methylated", "Methylated"))

# all of the proteins that get methylated
meth_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'Methylated') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get methylated are not included in the non-meth section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'Methylated' | (mod_group == 'Non-methylated' & (!LeadProt %in% meth_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean protein half-life (hours)', y = 'Density')+
  scale_fill_manual(values = c('Non-methylated' = "white", 'Methylated' = '#80b1d3')) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 18, family = "Lato"),
        legend.position = c(0.83,0.9), 
        axis.text = element_text(size = 18, family = "Lato"),  
        axis.title = element_text(size = 18, family = "Lato"))
```

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-methylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Methylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_fill_manual(values = c("white", '#80b1d3')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### oxPTMs

```{r}
#| echo: false
#| include: false
oxPTMs_prot <- human_complete %>% filter(unimod_id %in% oxPTMs$unimod_id & ptm_res %in% oxPTMs$AAs_list) %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, oxPTMs_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% oxPTMs$unimod_id & human_ptms_hl_mod_group$ptm_res %in% oxPTMs$AAs_list), 'oxPTMs', 'Non-oxPTMs')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-oxPTMs", "oxPTMs"))

# all of the proteins that get oxPTMs
oxPTMs_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'oxPTMs') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get oxPTMs are not included in the non-oxPTMs section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'oxPTMs' | (mod_group == 'Non-oxPTMs' & (!LeadProt %in% oxPTMs_prot$LeadProt)))

extra <- human_ptms_hl_long %>% filter(!unimod_id %in% oxPTMs$unimod_id) %>% mutate(mod_group = 'Non-oxPTMs')
human_ptms_hl_mod_group_exclusive <- rbind(human_ptms_hl_mod_group_exclusive, extra)

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-oxPTMs' = "white", 'oxPTMs' = '#fdb462')) +
  theme_classic() 
```

Violin plot:

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_long %>% filter(!unimod_id %in% oxPTMs$unimod_id) %>% mutate(mod_group = 'Non-oxPTMs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'oxPTMs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)
proteins_exclusive$mod_group <- factor(proteins_exclusive$mod_group, levels = c("Non-oxPTMs", "oxPTMs"))

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum),  width = 0.1,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_y_continuous(limits = c(0,500)) +
  scale_fill_manual(values = c("white", '#fdb462')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

### Lysine acylations

```{r}
#| echo: false
#| include: false
Kacylation_prot <- human_complete %>% filter(unimod_id %in% lysine_acylation & ptm_res == 'K') %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, Kacylation_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% lysine_acylation & human_ptms_hl_mod_group$ptm_res == 'K'), 'K acylation', 'Non-acylated')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-acylated", "K acylation"))

# all of the proteins that get K acylated
Kacylation_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'K acylation') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get K acylated are not included in the non-acylated section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'K acylation' | (mod_group == 'Non-acylated' & (!LeadProt %in% Kacylation_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 7) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-acylated' = "white", 'K acylation' = '#fb8072')) +
  theme_classic() 
```

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-acylated') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'K acylation') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_y_continuous(limits = c(0,500)) +
  scale_fill_manual(values = c("white", '#fb8072')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

### AGEs

```{r}
#| echo: false
#| include: false
AGEs_prot <- human_complete %>% filter(unimod_id %in% AGE & ptm_res == 'K') %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt))

human_ptms_hl_mod_group <- human_ptms_hl_long
human_ptms_hl_mod_group <- rbind(human_ptms_hl_mod_group, AGEs_prot)

human_ptms_hl_mod_group$mod_group <- if_else((human_ptms_hl_mod_group$unimod_id %in% AGE & human_ptms_hl_mod_group$ptm_res == 'K'), 'AGEs', 'Non-AGEs')

human_ptms_hl_mod_group$mod_group <- factor(human_ptms_hl_mod_group$mod_group, levels = c("Non-AGEs", "AGEs"))

# all of the proteins that get K acylated
AGEs_prot <- human_ptms_hl_mod_group %>% filter(mod_group == 'AGEs') %>% dplyr::select(LeadProt) %>% distinct()
# those proteins that get K acylated are not included in the non-acylated section
human_ptms_hl_mod_group_exclusive <- human_ptms_hl_mod_group %>% filter(mod_group == 'AGEs' | (mod_group == 'Non-AGEs' & (!LeadProt %in% AGEs_prot$LeadProt)))

ggplot(human_ptms_hl_mod_group_exclusive, aes(x = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_density(alpha = 0.7, bw = 1) + 
  labs(x = 'Mean half-life (hours)', y = 'Counts')+
  scale_fill_manual(values = c('Non-AGEs' = "white", 'AGEs' = '#fccde5')) +
  theme_classic() 
```

Violin plots:

```{r}
#| echo: false
#| warning: false
p1 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'Non-AGEs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 
p2 <- human_ptms_hl_mod_group_exclusive %>% filter(mod_group == 'AGEs') %>% group_by(Uniprot_entry_name) %>% summarise(sum =sum(counts_norm_abund_len), mean_hl_hours, mod_group) %>%
distinct(Uniprot_entry_name, mean_hl_hours, mod_group, sum) 

proteins_exclusive <- rbind(p1, p2)

ggplot() +
  geom_violin(data = human_ptms_hl_mod_group_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = counts_norm_abund_len, fill = mod_group)) +
  geom_boxplot(data = proteins_exclusive, aes(x = mod_group, y = mean_hl_hours, weight = sum), width = 0.15,  alpha = 0.5, position = position_dodge(width = 0.9)) +
  scale_y_continuous(limits = c(0,500)) +
  scale_fill_manual(values = c("white", '#fccde5')) +
  labs(y = 'Half-life (hours)')+
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = 'none',
        axis.title.x = element_blank(),
        axis.text = element_text(size = 20, family = "Lato"),  
        axis.title = element_text(size = 20, family = "Lato"))
```

```{r}
#| echo: false
print('Non-modified')
dim(p1)
print('Modified')
dim(p2)
```

```{r}
#| echo: false
# Create survey design
design <- svydesign(ids = ~1, data = proteins_exclusive, weights = ~sum)

# Perform the weighted Wilcoxon test using svyranktest
svyranktest_result <- svyranktest(mean_hl_hours~mod_group, design, test = "wilcoxon")
svyranktest_result

print('Adjusted p-value')
svyranktest_result$p.value * sqrt((dim(proteins_exclusive)[1])/100)
dim(proteins_exclusive)
```

## Binning

```{r}
#| echo: false
#| warning: false
#| message: false
df <- human_ptms_hl_long %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 60 ~ "40-60",
    mean_hl_hours <= 80 ~ "60-80",
    mean_hl_hours <= 100 ~ "80-100",
    mean_hl_hours <= 120 ~ "100-120",
    mean_hl_hours <= 140 ~ "120-140",
    mean_hl_hours <= 160 ~ "140-160",
    mean_hl_hours <= 180 ~ "160-180",
    mean_hl_hours <= 200 ~ "180-200",
    TRUE ~ "200+"
  ))

mean_counts_per_mt_group <- df %>%
  group_by(Uniprot_entry_name, hl_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len)) %>% 
  filter(!hl_group == '-') %>%
  distinct() %>% group_by(hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

# Plot bar chart
ggplot(mean_counts_per_mt_group, aes(x = hl_group, y = mean_ptms_group)) +
  geom_bar(stat = "identity", fill = '#919191') +
  scale_x_discrete(limits = c("40-60","60-80", "80-100", "100-120", "120-140", "140-160", "160-180", "180-200")) +
  scale_y_continuous(labels = scales::label_number(scale = 1)) +
  labs(x = "Proportion of amino acids with a score above 0.5",
       y = "Mean normalised counts") +
  theme_classic() +
  theme(
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

```{r}
#| echo: false
#| warning: false

ubi_prot <- human_complete %>% filter(unimod_id == 121) %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt))
df <- rbind(human_ptms_hl_long, ubi_prot)

a <- human_complete %>% filter(unimod_id %in% c(lysine_acylation, AGE)) %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt))
df <- rbind(df, a)

df <- df %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 60 ~ "40-60",
    mean_hl_hours <= 80 ~ "60-80",
    mean_hl_hours <= 100 ~ "80-100",
    mean_hl_hours <= 120 ~ "100-120",
    mean_hl_hours <= 140 ~ "120-140",
    mean_hl_hours <= 160 ~ "140-160",
    mean_hl_hours <= 180 ~ "160-180",
    mean_hl_hours <= 200 ~ "180-200",
    TRUE ~ "200+"
  )) %>%
  mutate(mod_group = case_when(
    unimod_id == 1 ~'Acetylated',
    unimod_id == 121 ~'Ubiquitinated',
    unimod_id %in% AGE ~ 'AGE',
    (unimod_id %in% lysine_acylation & ptm_res == 'K') ~ 'K acylation',
    unimod_id == 34 ~'Methylated',
    TRUE ~ "-"
  ))

mean_hours_per_hl_group <- df %>%
  group_by(Uniprot_entry_name, mod_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len), hl_group) %>% 
  filter(!mod_group == '-') %>%
  distinct() %>% group_by(mod_group, hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

mod_group_colours <- c('Acetylated' = '#8dd3c7', 'AGE' = '#fccde5', 'Ubiquitinated' = '#bebada', 'K acylation' = '#fb8072', 'Methylated' = '#80b1d3')

# Plot bar chart
ggplot(mean_hours_per_hl_group, aes(x = hl_group, y = mean_ptms_group, fill = mod_group)) +
  geom_bar(stat = "identity", position = 'dodge') +
  scale_x_discrete(limits = c("40-60","60-80", "80-100", "100-120", "120-140", "140-160", "160-180", "180-200")) +
  scale_y_continuous(limits = c(0,0.0006), labels = scales::label_number(scale = 1e4)) +
  scale_fill_manual(values = mod_group_colours) +
  labs(x = "Half-lives (hours)",
       y = "Mean normalised counts (scaled by 1e4)") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 13, family = "Lato"),
        legend.position = c(0.5,0.96), 
        legend.direction = 'horizontal',
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

oxPTMs:

```{r}
#| echo: false
#| warning: false
#| message: false
oxptms_prot <- human_complete %>% filter(unimod_id %in% oxPTMs$unimod_id) %>% inner_join(long_lived_proteins_hl, by = join_by(LeadProt)) %>% filter(!ptm_class == 'Post-translational')
df <- rbind(human_ptms_hl_long, oxptms_prot)

df <- df %>%
  mutate(hl_group = case_when(
    mean_hl_hours <= 60 ~ "40-60",
    mean_hl_hours <= 80 ~ "60-80",
    mean_hl_hours <= 100 ~ "80-100",
    mean_hl_hours <= 120 ~ "100-120",
    mean_hl_hours <= 140 ~ "120-140",
    mean_hl_hours <= 160 ~ "140-160",
    mean_hl_hours <= 180 ~ "160-180",
    mean_hl_hours <= 200 ~ "180-200",
    TRUE ~ "200+"
  )) %>%
  mutate(mod_group = case_when(
    (unimod_id %in% oxPTMs$unimod_id & ptm_res %in% oxPTMs$AAs_list) ~ 'oxPTMs',
    unimod_id == 21 ~'Phosphorylated',
    TRUE ~ "-"
  ))

mean_hours_per_hl_group <- df %>%
  group_by(Uniprot_entry_name, mod_group) %>%
  summarize(sum_ptms = sum(counts_norm_abund_len), hl_group) %>% 
  filter(!mod_group == '-') %>%
  distinct() %>% group_by(mod_group, hl_group) %>% summarise(mean_ptms_group = mean(sum_ptms))

mod_group_colours <- c('oxPTMs' = '#fdb462', 'Phosphorylated' = '#b3de69')

# Plot bar chart
ggplot(mean_hours_per_hl_group, aes(x = hl_group, y = mean_ptms_group, fill = mod_group)) +
  geom_bar(stat = "identity", position = 'dodge') +
  scale_y_continuous(limits = c(0,0.006), labels = scales::label_number(scale = 1e3)) +
  scale_x_discrete(limits = c("40-60","60-80", "80-100", "100-120", "120-140", "140-160", "160-180", "180-200")) +
  labs(x = "Half-lives (hours)",
       y = "Mean normalised counts (scaled by 1e3)") +
  scale_fill_manual(values = mod_group_colours) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.text = element_text(size = 13, family = "Lato"),
        legend.position = c(0.76,0.96), 
        legend.direction = 'horizontal',
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"))
```

# Binning by the number of PTMs

```{r}
#| echo: false
#| message: false
#| warning: false
bins <- human_ptms_hl_long %>% group_by(Uniprot_entry_name) %>% summarise(mean_hl_hours, sum_norm_counts = sum(counts_norm_abund_len)) %>% distinct() %>% arrange(desc(sum_norm_counts))
bound <- dim(bins)[1]
bin1 <- bins[1:as.integer(bound/3), ]
bin2 <- bins[as.integer(bound/3 + 1):as.integer(bound/3*2), ]
bin3 <- bins[as.integer(bound/3*2+1):bound, ]

bin1$bin <- 'High'
bin2$bin <- 'Medium'
bin3$bin <- 'Low'

bins <- rbind(bin1, bin2, bin3)
bins$bin <- factor(bins$bin, levels = c("Low", "Medium", "High"))
ggplot(bins, aes(x = mean_hl_hours)) +
  geom_histogram(fill = '#919191') +
  labs(x = 'Half-life (hours)', y = 'Protein counts') +
  facet_wrap(~bin) +
  theme_bw() +
  theme(
        panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        strip.text = element_text(size = 13, family = "Lato"),
        axis.text = element_text(size = 13, family = "Lato"),  
        axis.title = element_text(size = 13, family = "Lato"),
        strip.background.x = element_blank()
        )
```
